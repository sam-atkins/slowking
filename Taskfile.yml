# https://taskfile.dev
version: "3"

dotenv: [".env"]

tasks:
  default:
    desc: Build and run the application
    cmds:
      - task: build
      - task: up

  build:
    desc: Build the application via docker-compose
    cmds:
      - task: env-file
      - docker-compose build

  up:
    desc: Run the application via docker-compose
    cmds:
      - task: env-file
      - docker-compose up

  start:
    desc: Make a request to the application using xh to start a benchmark
    cmds:
      - xh POST localhost:8091/api/v1/benchmarks/start @./tests/data/payload.json

  api-eigen-health:
    desc: Make a request to the Mock Eigen API health/ endpoint using xh
    cmds:
      - xh localhost:8283/health

  api-slowking-health:
    desc: Make a request to the slowking health/ endpoint using xh
    cmds:
      - xh localhost:8091/api/v1/health

  api-health:
    desc: Make requests to the /health endpoints using xh
    cmds:
      - task: api-eigen-health
      - task: api-slowking-health

  event:
    desc: Make a request to the application using xh with a test event
    cmds:
      - xh POST localhost:8091/api/v1/events/publish @./tests/data/event.json

  env-file:
    desc: Create .env file from .env.dev
    cmds:
      - cp .env.dev .env

  local-env:
    desc: Create local virtual environment
    internal: true
    cmds:
      - python3 -m venv .venv

  install:
    desc: Install dependencies (locally, not in Docker)
    cmds:
      - pyenv local
      - task: env-file
      - task: local-env
      - source .venv/bin/activate
      - poetry install
      - pre-commit install

  install-work:
    desc: Install dependencies (locally, not in Docker, on work machine)
    cmds:
      - pyenv local
      - task: env-file
      - task: local-env
      - source .venv/bin/activate
      - poetry@1.5.1 install
      - pre-commit install

  update:
    desc: Update dependencies (locally, not in Docker)
    cmds:
      - pyenv local
      - source .venv/bin/activate
      - poetry@1.5.1 install

  mypy:
    desc: Run type checking (locally, not in Docker)
    cmds:
      - poetry run mypy . --check-untyped-defs

  lint:
    desc: Run ruff
    cmds:
      - poetry run ruff --fix .

  run-formatter:
    desc: Format code using ruff (using Black formatting conventions)
    cmds:
      - poetry run ruff format slowking/ eigenapi/ tests/

  fmt:
    desc: "Fix linting issues and format code using ruff"
    cmds:
      - task: lint
      - task: run-formatter

  fmt-check:
    desc: "Checks code linting and formatting using ruff"
    cmds:
      - poetry run ruff check .
      - poetry run ruff format --check slowking/ eigenapi/ tests/

  test:
    desc: Run tests (locally, not in Docker)
    dotenv: ["./.env.test"]
    cmds:
      - poetry run pytest -v

  cov:
    desc: Run tests (locally, not in Docker) with coverage
    dotenv: ["./.env.test"]
    cmds:
      - poetry run pytest -v --cov

  pre:
    desc: "Pre runs various pre-CI tasks to prepare a diff before committing"
    cmds:
      - task: fmt
      - task: test
      - task: mypy

  nuke:
    desc: Stop and remove all containers, networks, volumes, postgres-data and CSV reports
    prompt: This will nuke containers, volumes and postgres data... Do you want to continue?
    cmds:
      - docker-compose down -v --remove-orphans
      - rm -rf ./postgres-data
      - rm -rf ./reports/*.csv
